---
# tasks file for kernel_module_blacklist

- name: Check if kernel modules are currently loaded
  ansible.builtin.shell: |
    set -o pipefail
    lsmod | grep -E "{{ blacklisted_modules | join('|') }}" || true
  args:
    executable: /bin/bash
  register: loaded_modules
  changed_when: false
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware

- name: Display currently loaded blacklisted modules
  ansible.builtin.debug:
    msg: |
      Currently loaded modules that will be blacklisted:
      {{ loaded_modules.stdout if loaded_modules.stdout else 'None of the specified modules are currently loaded' }}
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware

- name: Create blacklist configuration file for kernel modules
  ansible.builtin.copy:
    dest: "{{ blacklist_conf_path }}"
    content: |
      # Kernel module blacklist managed by Ansible
      # This file prevents specific kernel modules from loading automatically
      #
      # Generated on: {{ ansible_date_time.iso8601 }}
      # Managed by: kernel_module_blacklist role

      {% for module in blacklisted_modules %}
      # Blacklist {{ module }} module
      blacklist {{ module }}
      install {{ module }} /bin/true

      {% endfor %}
    mode: '0644'
    owner: root
    group: root
  notify: Update initramfs
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware

- name: Unload blacklisted kernel modules if currently loaded
  community.general.modprobe:
    name: "{{ item }}"
    state: absent
  loop: "{{ blacklisted_modules }}"
  when: loaded_modules.stdout | regex_search(item)
  failed_when: false
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware

- name: Verify modules are not loaded
  ansible.builtin.shell: |
    set -o pipefail
    lsmod | grep -E "{{ blacklisted_modules | join('|') }}" || true
  args:
    executable: /bin/bash
  register: modules_after_unload
  changed_when: false
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware

- name: Display blacklist status
  ansible.builtin.debug:
    msg: |
      Kernel module blacklist configuration complete!

      Blacklisted modules: {{ blacklisted_modules | join(', ') }}

      Configuration file: {{ blacklist_conf_path }}

      {% if modules_after_unload.stdout %}
      WARNING: The following modules are still loaded:
      {{ modules_after_unload.stdout }}

      These modules may be in use or have dependencies.
      A system reboot is recommended to fully apply the blacklist.
      {% else %}
      Status: All specified modules are currently unloaded.
      {% endif %}

      What was done:
      1. Created blacklist configuration in {{ blacklist_conf_path }}
      2. Added 'blacklist <module>' entries to prevent auto-loading
      3. Added 'install <module> /bin/true' to prevent manual loading
      4. Attempted to unload currently loaded modules
      5. Initiated initramfs update (will complete after this task)

      How blacklisting works:
      - 'blacklist <module>': Prevents automatic loading at boot
      - 'install <module> /bin/true': Prevents manual loading with modprobe
      - Both directives ensure the module won't be loaded

      Verification commands:
      - lsmod | grep {{ blacklisted_modules[0] }}  : Check if module is loaded (should return nothing)
      - modinfo {{ blacklisted_modules[0] }}       : Show module information
      - cat {{ blacklist_conf_path }}              : View blacklist configuration
      - modprobe {{ blacklisted_modules[0] }}      : Try to load (should fail silently)

      To remove blacklist:
      - sudo rm {{ blacklist_conf_path }}
      - sudo update-initramfs -u
      - Reboot system

      Common reasons for blacklisting modules:
      - Hardware compatibility issues
      - Prefer alternative drivers
      - Prevent conflicting modules
      - Disable problematic hardware
      - Security hardening

      Module information:
      {% for module in blacklisted_modules %}
      - {{ module }}: Use 'modinfo {{ module }}' for details
      {% endfor %}

      IMPORTANT: A system reboot is strongly recommended to ensure
      the blacklist takes full effect and prevent any module dependencies
      from reloading the blacklisted modules.

      After reboot, verify with:
      lsmod | grep -E "{{ blacklisted_modules | join('|') }}"

      This command should return no results if blacklist is successful.
  tags:
    - kernel_modules
    - blacklist
    - system
    - hardware
