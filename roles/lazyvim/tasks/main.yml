---
# tasks file for lazyvim

- name: Install dependencies for LazyVim
  ansible.builtin.apt:
    name:
      - git
      - make
      - unzip
      - gcc
      - g++
      - ripgrep
      - fd-find
      - curl
    state: present
    update_cache: yes
  tags:
    - lazyvim
    - neovim
    - packages
    - development
    - editor
    - dependencies

- name: Ensure Neovim is installed
  ansible.builtin.apt:
    name: neovim
    state: present
  tags:
    - lazyvim
    - neovim
    - packages
    - development
    - editor
    - dependencies

- name: Check if LazyVim is already installed
  ansible.builtin.stat:
    path: "{{ lazyvim_config_dir }}/lua/config/lazy.lua"
  register: lazyvim_installed
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor

- name: Display LazyVim status if already installed
  ansible.builtin.debug:
    msg: "LazyVim configuration already exists at {{ lazyvim_config_dir }}"
  when: lazyvim_installed.stat.exists
  tags:
    - lazyvim
    - neovim
    - development
    - editor

- name: Backup existing Neovim configuration if it exists
  ansible.builtin.command:
    cmd: mv {{ lazyvim_config_dir }} {{ lazyvim_backup_dir }}
  args:
    removes: "{{ lazyvim_config_dir }}"
    creates: "{{ lazyvim_backup_dir }}"
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor
    - backup

- name: Backup existing Neovim data if it exists
  ansible.builtin.command:
    cmd: mv {{ lazyvim_data_dir }} {{ lazyvim_data_backup_dir }}
  args:
    removes: "{{ lazyvim_data_dir }}"
    creates: "{{ lazyvim_data_backup_dir }}"
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor
    - backup

- name: Backup existing Neovim state if it exists
  ansible.builtin.command:
    cmd: mv {{ lazyvim_state_dir }} {{ lazyvim_state_backup_dir }}
  args:
    removes: "{{ lazyvim_state_dir }}"
    creates: "{{ lazyvim_state_backup_dir }}"
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor
    - backup

- name: Backup existing Neovim cache if it exists
  ansible.builtin.command:
    cmd: mv {{ lazyvim_cache_dir }} {{ lazyvim_cache_backup_dir }}
  args:
    removes: "{{ lazyvim_cache_dir }}"
    creates: "{{ lazyvim_cache_backup_dir }}"
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor
    - backup

- name: Clone LazyVim starter configuration
  ansible.builtin.git:
    repo: "{{ lazyvim_starter_repo }}"
    dest: "{{ lazyvim_config_dir }}"
    version: main
    force: false
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor

- name: Remove .git directory from LazyVim config
  ansible.builtin.file:
    path: "{{ lazyvim_config_dir }}/.git"
    state: absent
  when: not lazyvim_installed.stat.exists
  become: true
  become_user: "{{ lazyvim_user }}"
  tags:
    - lazyvim
    - neovim
    - development
    - editor

- name: Display LazyVim installation info
  ansible.builtin.debug:
    msg: |
      LazyVim has been installed successfully!

      LazyVim is a Neovim setup powered by lazy.nvim to make it easy to
      customize and extend your Neovim configuration.

      Installation locations:
      - Config:  {{ lazyvim_config_dir }}
      - Data:    {{ lazyvim_data_dir }}
      - State:   {{ lazyvim_state_dir }}
      - Cache:   {{ lazyvim_cache_dir }}

      {% if lazyvim_installed.stat.exists %}
      Note: LazyVim was already installed. No changes were made.
      {% else %}
      Your old Neovim configuration has been backed up to:
      - Config backup:  {{ lazyvim_backup_dir }}
      - Data backup:    {{ lazyvim_data_backup_dir }}
      - State backup:   {{ lazyvim_state_backup_dir }}
      - Cache backup:   {{ lazyvim_cache_backup_dir }}
      {% endif %}

      Getting started:
      1. Launch Neovim: nvim
      2. LazyVim will automatically install plugins on first run
      3. Wait for all plugins to install (may take a few minutes)
      4. Restart Neovim after installation completes

      Essential LazyVim keybindings:
      Leader key: Space

      File navigation:
      - <leader>ff   : Find files (Telescope)
      - <leader>fg   : Live grep (search in files)
      - <leader>fb   : Browse buffers
      - <leader>fr   : Recent files
      - <leader>e    : Toggle file explorer (Neo-tree)

      Window management:
      - <leader>wd   : Delete window
      - <leader>w-   : Split window below
      - <leader>w|   : Split window right
      - <C-h/j/k/l>  : Navigate between windows

      Buffer management:
      - <leader>bd   : Delete buffer
      - <leader>bb   : Switch to other buffer
      - <S-h>        : Previous buffer
      - <S-l>        : Next buffer

      LSP (Language Server Protocol):
      - gd           : Go to definition
      - gr           : Go to references
      - K            : Hover documentation
      - <leader>ca   : Code actions
      - <leader>cr   : Rename symbol
      - <leader>cf   : Format document
      - [d / ]d      : Previous/next diagnostic

      Search and replace:
      - <leader>sg   : Grep search
      - <leader>sw   : Search current word
      - <leader>sr   : Search and replace

      Git integration:
      - <leader>gg   : LazyGit (if installed)
      - <leader>gb   : Git blame
      - <leader>gf   : Git file history
      - ]h / [h      : Next/previous git hunk

      Terminal:
      - <C-/>        : Toggle terminal
      - <leader>ft   : Terminal (root dir)

      Useful commands:
      - <leader>l    : Lazy (plugin manager)
      - <leader>cm   : Mason (LSP/formatter installer)
      - <leader>xx   : Trouble (diagnostics)
      - <leader>cs   : Symbols (document)
      - <leader>q    : Quit all

      Help and configuration:
      - <leader>sk   : Search keymaps
      - <leader>sC   : Search commands
      - <leader>sh   : Search help
      - :LazyExtras  : Manage LazyVim extras
      - :checkhealth : Check Neovim health

      Customization:
      - Edit config: ~/.config/nvim/lua/config/
        - options.lua   : Neovim options
        - keymaps.lua   : Custom keymaps
        - lazy.lua      : Plugin configuration
        - autocmds.lua  : Autocommands
      - Add plugins: ~/.config/nvim/lua/plugins/
        - Create .lua files to add/configure plugins
      - LazyVim extras: :LazyExtras
        - Enable language-specific configurations
        - Add formatters, linters, LSPs

      Language support:
      LazyVim includes support for many languages out of the box.
      Additional language support can be added via :LazyExtras

      Common extras to enable:
      - lang.typescript    : TypeScript/JavaScript
      - lang.python        : Python
      - lang.go            : Go
      - lang.rust          : Rust
      - lang.java          : Java
      - lang.json          : JSON
      - lang.yaml          : YAML
      - lang.docker        : Docker
      - lang.terraform     : Terraform
      - formatting.prettier: Prettier formatter
      - linting.eslint     : ESLint

      Install language servers:
      - :Mason               : Open Mason UI
      - :MasonInstall <lsp>  : Install specific LSP
      Examples:
      - :MasonInstall typescript-language-server
      - :MasonInstall pyright
      - :MasonInstall lua-language-server

      Documentation:
      - LazyVim: https://www.lazyvim.org/
      - Keymaps: https://www.lazyvim.org/keymaps
      - Plugins: https://www.lazyvim.org/plugins
      - Configuration: https://www.lazyvim.org/configuration

      Tips:
      - Press <leader> and wait to see available keybindings
      - Use :Telescope keymaps to search all keymaps
      - LazyVim is highly customizable - check the docs!
      - Join the community: https://github.com/LazyVim/LazyVim

      Note: On first launch, LazyVim will download and install all
      plugins. This may take several minutes. Be patient!
  tags:
    - lazyvim
    - neovim
    - development
    - editor
